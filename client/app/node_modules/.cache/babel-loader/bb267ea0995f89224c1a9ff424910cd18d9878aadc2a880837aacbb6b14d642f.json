{"ast":null,"code":"var _jsxFileName = \"E:\\\\Latest\\\\2_1-Term-Project\\\\client\\\\app\\\\src\\\\routes\\\\Cart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cart = () => {\n  _s();\n  const [products, setProducts] = useState([{\n    id: 1,\n    name: 'Product 1',\n    price: 100\n  }]);\n  useEffect(() => {\n    async function fetchCartProducts() {\n      try {\n        const response = await fetch('your_backend_api_endpoint_here');\n        if (!response.ok) {\n          throw new Error('Failed to fetch products');\n        }\n        const productsData = await response.json();\n        setProducts(productsData);\n      } catch (error) {\n        console.error('Error fetching products:', error);\n      }\n    }\n\n    // fetchCartProducts();\n  }, []);\n  const handleRemoveProduct = productId => {\n    // Implement the logic to remove the product with productId from the cart\n    // You can make another async request to your backend to remove the product\n    // or manipulate the products state directly if you have the product IDs stored\n    // in a way that allows you to identify and remove them.\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Cart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), products.map(product => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [product.name, \" - $\", product.price]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleRemoveProduct(product.id),\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this)]\n    }, product.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(Cart, \"ZqeQAApgR5MbQVTVfICEPQvEco4=\");\n_c = Cart;\nexport default Cart;\nvar _c;\n$RefreshReg$(_c, \"Cart\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Cart","_s","products","setProducts","id","name","price","fetchCartProducts","response","fetch","ok","Error","productsData","json","error","console","handleRemoveProduct","productId","children","fileName","_jsxFileName","lineNumber","columnNumber","map","product","onClick","_c","$RefreshReg$"],"sources":["E:/Latest/2_1-Term-Project/client/app/src/routes/Cart.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst Cart = () => {\r\n  const [products, setProducts] = useState([{ id: 1, name: 'Product 1', price: 100}]);\r\n\r\n  useEffect(() => {\r\n    async function fetchCartProducts() {\r\n      try {\r\n        const response = await fetch('your_backend_api_endpoint_here');\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch products');\r\n        }\r\n        const productsData = await response.json();\r\n        setProducts(productsData);\r\n      } catch (error) {\r\n        console.error('Error fetching products:', error);\r\n      }\r\n    }\r\n\r\n   // fetchCartProducts();\r\n  }, []);\r\n\r\n  const handleRemoveProduct = (productId) => {\r\n    // Implement the logic to remove the product with productId from the cart\r\n    // You can make another async request to your backend to remove the product\r\n    // or manipulate the products state directly if you have the product IDs stored\r\n    // in a way that allows you to identify and remove them.\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Cart</h1>\r\n      {products.map(product => (\r\n        <div key={product.id}>\r\n          <p>{product.name} - ${product.price}</p>\r\n          <button onClick={() => handleRemoveProduct(product.id)}>Remove</button>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,CAAC;IAAEQ,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,WAAW;IAAEC,KAAK,EAAE;EAAG,CAAC,CAAC,CAAC;EAEnFT,SAAS,CAAC,MAAM;IACd,eAAeU,iBAAiBA,CAAA,EAAG;MACjC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,CAAC;QAC9D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;QAC7C;QACA,MAAMC,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAC1CV,WAAW,CAACS,YAAY,CAAC;MAC3B,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF;;IAED;EACD,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,mBAAmB,GAAIC,SAAS,IAAK;IACzC;IACA;IACA;IACA;EAAA,CACD;EAED,oBACElB,OAAA;IAAAmB,QAAA,gBACEnB,OAAA;MAAAmB,QAAA,EAAI;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACZpB,QAAQ,CAACqB,GAAG,CAACC,OAAO,iBACnBzB,OAAA;MAAAmB,QAAA,gBACEnB,OAAA;QAAAmB,QAAA,GAAIM,OAAO,CAACnB,IAAI,EAAC,MAAI,EAACmB,OAAO,CAAClB,KAAK;MAAA;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxCvB,OAAA;QAAQ0B,OAAO,EAAEA,CAAA,KAAMT,mBAAmB,CAACQ,OAAO,CAACpB,EAAE,CAAE;QAAAc,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA,GAF/DE,OAAO,CAACpB,EAAE;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGf,CACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACrB,EAAA,CAtCID,IAAI;AAAA0B,EAAA,GAAJ1B,IAAI;AAwCV,eAAeA,IAAI;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}